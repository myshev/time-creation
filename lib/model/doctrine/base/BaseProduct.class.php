<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Product', 'doctrine');

/**
 * BaseProduct
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property string $announce
 * @property clob $description
 * @property string $image
 * @property boolean $is_active
 * @property integer $quantity_in_stock
 * @property integer $cost
 * @property integer $manufacturer_id
 * @property string $alias
 * @property integer $product_subcategory_id
 * @property Manufacturer $Manufacturer
 * @property ProductSubcategory $ProductSubcategory
 * @property Doctrine_Collection $Product2Product
 * 
 * @method string              getName()                   Returns the current record's "name" value
 * @method string              getAnnounce()               Returns the current record's "announce" value
 * @method clob                getDescription()            Returns the current record's "description" value
 * @method string              getImage()                  Returns the current record's "image" value
 * @method boolean             getIsActive()               Returns the current record's "is_active" value
 * @method integer             getQuantityInStock()        Returns the current record's "quantity_in_stock" value
 * @method integer             getCost()                   Returns the current record's "cost" value
 * @method integer             getManufacturerId()         Returns the current record's "manufacturer_id" value
 * @method string              getAlias()                  Returns the current record's "alias" value
 * @method integer             getProductSubcategoryId()   Returns the current record's "product_subcategory_id" value
 * @method Manufacturer        getManufacturer()           Returns the current record's "Manufacturer" value
 * @method ProductSubcategory  getProductSubcategory()     Returns the current record's "ProductSubcategory" value
 * @method Doctrine_Collection getProduct2Product()        Returns the current record's "Product2Product" collection
 * @method Product             setName()                   Sets the current record's "name" value
 * @method Product             setAnnounce()               Sets the current record's "announce" value
 * @method Product             setDescription()            Sets the current record's "description" value
 * @method Product             setImage()                  Sets the current record's "image" value
 * @method Product             setIsActive()               Sets the current record's "is_active" value
 * @method Product             setQuantityInStock()        Sets the current record's "quantity_in_stock" value
 * @method Product             setCost()                   Sets the current record's "cost" value
 * @method Product             setManufacturerId()         Sets the current record's "manufacturer_id" value
 * @method Product             setAlias()                  Sets the current record's "alias" value
 * @method Product             setProductSubcategoryId()   Sets the current record's "product_subcategory_id" value
 * @method Product             setManufacturer()           Sets the current record's "Manufacturer" value
 * @method Product             setProductSubcategory()     Sets the current record's "ProductSubcategory" value
 * @method Product             setProduct2Product()        Sets the current record's "Product2Product" collection
 * 
 * @package    manymoney
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseProduct extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('product');
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'comment' => 'Название продукта',
             'length' => 255,
             ));
        $this->hasColumn('announce', 'string', 1000, array(
             'type' => 'string',
             'notnull' => true,
             'comment' => 'Анонс',
             'length' => 1000,
             ));
        $this->hasColumn('description', 'clob', null, array(
             'type' => 'clob',
             'notnull' => true,
             'comment' => 'Описание',
             ));
        $this->hasColumn('image', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'comment' => 'Изображение',
             'length' => 255,
             ));
        $this->hasColumn('is_active', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => true,
             'comment' => 'Элемент активен',
             ));
        $this->hasColumn('quantity_in_stock', 'integer', 20, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'autoincrement' => false,
             'notnull' => true,
             'comment' => 'Количество на складе',
             'length' => 20,
             ));
        $this->hasColumn('cost', 'integer', 20, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'autoincrement' => false,
             'notnull' => true,
             'comment' => 'Цена',
             'length' => 20,
             ));
        $this->hasColumn('manufacturer_id', 'integer', 20, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'autoincrement' => false,
             'notnull' => false,
             'comment' => 'Производитель',
             'length' => 20,
             ));
        $this->hasColumn('alias', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'comment' => 'Алиас',
             'length' => 255,
             ));
        $this->hasColumn('product_subcategory_id', 'integer', null, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'comment' => 'ID подкатегории',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Manufacturer', array(
             'local' => 'manufacturer_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('ProductSubcategory', array(
             'local' => 'product_subcategory_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('Product2Product', array(
             'local' => 'id',
             'foreign' => 'product_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}