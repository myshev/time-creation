<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Product2Product', 'doctrine');

/**
 * BaseProduct2Product
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $product_id
 * @property integer $parent_product_id
 * @property Product $Product
 * @property Product $ParentProduct
 * 
 * @method integer         getProductId()         Returns the current record's "product_id" value
 * @method integer         getParentProductId()   Returns the current record's "parent_product_id" value
 * @method Product         getProduct()           Returns the current record's "Product" value
 * @method Product         getParentProduct()     Returns the current record's "ParentProduct" value
 * @method Product2Product setProductId()         Sets the current record's "product_id" value
 * @method Product2Product setParentProductId()   Sets the current record's "parent_product_id" value
 * @method Product2Product setProduct()           Sets the current record's "Product" value
 * @method Product2Product setParentProduct()     Sets the current record's "ParentProduct" value
 * 
 * @package    manymoney
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseProduct2Product extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('product2product');
        $this->hasColumn('product_id', 'integer', 20, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'autoincrement' => false,
             'comment' => 'Продукт 1',
             'length' => 20,
             ));
        $this->hasColumn('parent_product_id', 'integer', 20, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'autoincrement' => false,
             'comment' => 'Продукт 2',
             'length' => 20,
             ));


        $this->index('product2product_index', array(
             'fields' => 
             array(
              0 => 'product_id',
              1 => 'parent_product_id',
             ),
             'type' => 'unique',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Product', array(
             'local' => 'product_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Product as ParentProduct', array(
             'local' => 'parent_product_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));
    }
}